IN PROGRESS

Problem 0
In this problem, the limiting factor is the number of same size boxes. This is because any number of boxes, as long as they have different sizes, and be fitted in ascending size to 1 visible box.
There are two natural ways to do this:
1) O(nlogn) time, O(1) extra space.
Sort in ascending size, then do a linear search, keeping track of the maximum number of equal-sized boxes
2) O(n) time, O(n) extra space.
Use a hash to map every box size to their counts, while keeping a global maximum variable.
The number of maximum number of equal-sized boxes is the minimum number of visible boxes.

Problem 1
Definition of tree: A graph of nodes and edges without a cycle.
1. Yes.
P(N) = An acyclic graph with N nodes and N-1 edges is a tree.
P(1) = An acyclic graph with 1 node and 0 edges is obviously a tree.
I.H. - P(k) = An acyclic graph with k nodes and k-1 edges is a tree.
P(k+1) = An acyclic graph with k+1 nodes and k edges is a tree.
This is true because any acyclic graph with k+1 nodes and k edges can be formed from an acyclic graph with k nodes and k-1 edges. We know that this graph is a tree. Adding a node and adding an edge that would not form a cycle results in another tree.

2. Yes
Assume that the graph contains a cycle.
Some subgraph of k nodes and at least k edges between the k nodes exist, where k >= 1.
Then, there remains N-k nodes and N-k-1 edges.
Take the following cases:
i) k < N-1
There must be at least 1 edge from 1 node in the cycle to a node not in the cycle, since the nodes are connected. Then, There now remains N-k-1 unconnected nodes and N-k-2 edges. Repeating the process, we find that it is impossible to connect every node of the graph, since there will be a missing edge at the end. Therefore, this is a contradiction.
ii) k = N-1
There remains 1 unconnected node and no remaining edges. This is a contradiction from the assumption.
Then, this is now an acyclic graph with N nodes and N-1 edges, from part 1) we know this is a tree.

3. Yes
This graph with N nodes must have N-1 edges, since there needs to be at least N-1 edges in order for every node to be connected.
However, adding another edge creates a cycle somewhere in the graph.
Thus, from part 1), this is a tree.

Problem 2
Let n_i denote node i, and v_i denote the value of v_i
DP[0][i] = The maximum independent set value if n_i is included in the independent set
DP[1][i] = The maximum independent set value if n_i is NOT included in the independent set
Then the answer of this problem is max(DP[0][root], DP[1][root])
DP[0][i] = sum(max(DP[0][n_j], DP[1][n_j])), where n_j = every neighbor of n_i
DP[1][i] = sum(max(DP[0][n_j])), where n_j = every neighbor of n_i

Problem 3
at first glance, DP from city N?
M[i, j] = the maximum number of cities that you can go sightseeing in if you have reached city i by time j.
Answer is M[N, T_f]
M[i, j] = max(
M[i-1, j - D_i],
M[i-1, j - D_i - T_f] + 1
)

F[i, j] = the earliest time you can reach city i after having gone sightseeing at exactly j different cities.
Answer is max(0, j*) where j* = all j such that F[N, j] <= T_f
F[i, j] = min(
F[i-1, j] + D_i,
F[i-1, j-1] + T_s + D_i
)

Problem 4
Sort. Although sorting changes the order of i and j, since D(x,y) is either 0 or absolute value of x-y, the order of the difference does not matter.





